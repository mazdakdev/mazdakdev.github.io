<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>mazdak.dev</title>
    <subtitle>Mazdak Pakaghideh</subtitle>
    <link rel="self" type="application/atom+xml" href="https://mazdakdev.github.io/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://mazdakdev.github.io/"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2023-09-23T00:00:00+00:00</updated>
    <id>https://mazdakdev.github.io/atom.xml</id>
    <entry xml:lang="en">
        <title>Diving Deeper into Operating Systems – Part 0</title>
        <published>2023-09-23T00:00:00+00:00</published>
        <updated>2023-09-23T00:00:00+00:00</updated>
        
        <author>
          <name>
            Mazdak Pakaghideh
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://mazdakdev.github.io/blog/diving-deeper-os-1/"/>
        <id>https://mazdakdev.github.io/blog/diving-deeper-os-1/</id>
        
        <content type="html" xml:base="https://mazdakdev.github.io/blog/diving-deeper-os-1/">&lt;p&gt;Have you ever wondered how do computers boot up? How does the computer find the operating system when there is none present? Or even how an operating system is developed? These questions intrigued me when I started learning programming. I pondered, whether is it possible for a simple calculator app to function standalone without an underlying operating system.&lt;&#x2F;p&gt;
&lt;p&gt;Well to find out, we’ll first need to study the fundamental concepts of computers.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;If you wish to make an apple pie from scratch, you must first invent the universe&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;cite&gt;Carl Sagan, American astronomer and planetary scientist.&lt;br&gt;&lt;&#x2F;cite&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;the-os&quot;&gt;The OS&lt;&#x2F;h2&gt;
&lt;p&gt;We are all accustomed to using various operating systems (OS) for daily tasks or leisure activities. But what exactly are these operating systems, and what do they do? An OS creates an interface that allows the software to effectively utilize the necessary hardware and resources. To visualize this, let’s examine the structure of Atari’s consoles.&lt;&#x2F;p&gt;
&lt;p&gt;In an old Atari console, when you insert a disk, that disk has complete access to the hardware. Essentially, the disk acts as both the operating system and the only running game. There’s no interface for managing multiple applications, multi-threading, or RAM. If you want to run another game, you need to turn off the console and switch the disk. Therefore, developing a game for Atari means directly controlling the hardware with your code.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;mazdak.dev&#x2F;wp-content&#x2F;uploads&#x2F;2023&#x2F;09&#x2F;Group-2.png&quot; alt=&quot;Atari Strucutre&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Contrast this with modern operating systems, which have a structure like the one shown below:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;mazdak.dev&#x2F;wp-content&#x2F;uploads&#x2F;2023&#x2F;09&#x2F;images.png&quot; alt=&quot;Modern OS Structure&quot; &#x2F;&gt;
&lt;em&gt;By minnie.tuhs.org&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;in modern systems, the kernel manages both applications and hardware. Applications cannot directly access the hardware; instead, they communicate with the hardware through the kernel. This is why you cannot create an OS with high-level languages like Python, as they don’t provide direct hardware access. Instead, high-level languages allow you to call predefined APIs that abstract hardware interactions.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-is-the-kernel&quot;&gt;What is The Kernel?&lt;&#x2F;h2&gt;
&lt;p&gt;The kernel is the heart of an operating system. It manages memory, the hard drive, and other hardware components. However, it’s useless without a set of applications. In summary, an operating system is composed of the kernel and a collection of applications that users can interact with.&lt;&#x2F;p&gt;
&lt;p&gt;A perfect example of this concept is the GNU&#x2F;Linux project. Richard Stallman, founder of the Free Software Foundation, initiated the GNU project, which stands for “GNU is not Unix.” Stallman believed that to create a society of free software, the most essential application needed was the operating system itself. He began developing essential tools like the Emacs text editor and the GCC compiler. While these were crucial components, the project lacked a kernel.&lt;&#x2F;p&gt;
&lt;p&gt;This changed when Linus Torvalds released the Linux kernel. The combination of the GNU system and the Linux kernel resulted in a complete, free operating system known today as GNU&#x2F;Linux.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;developing-an-operating-system&quot;&gt;Developing an Operating System&lt;&#x2F;h2&gt;
&lt;p&gt;While creating an operating system as complex as macOS, Linux, or Windows is extremely challenging, understanding the basics is within our reach.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;If you are unable to create something from scratch, you can never understand it.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;the-bios&quot;&gt;&lt;strong&gt;The BIOS&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;BIOS stands for Basic Input&#x2F;Output System, a program running on a computer’s motherboard. It initializes hardware components during the boot process and provides basic instructions that allow the operating system to start. The BIOS also offers a low-level interface for communicating with hardware components, such as hard drives and keyboards.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-boot-process&quot;&gt;&lt;strong&gt;The Boot Process&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;When a computer starts up, the BIOS doesn’t know how to load the operating system and requires a boot sector to do so. However, since there is no operating system, there is no path to the boot sector. To load it, the BIOS must know the physical location of the boot sector on the disk, which is cylinder 0, head 0, sector 0, and it’s 512 bytes in size.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;mazdak.dev&#x2F;wp-content&#x2F;uploads&#x2F;2023&#x2F;09&#x2F;harddisk.gif&quot; alt=&quot;Hard Disks Strucutre&quot; &#x2F;&gt;
&lt;em&gt;By web.cs.ucla.edu&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;To ensure that a disk is bootable, the BIOS checks for a specific signature. Specifically, the 511th and 512th bytes of the boot sector must be &lt;code&gt;0xAA55&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-bios-interrupts&quot;&gt;&lt;strong&gt;The BIOS Interrupts&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;BIOS interrupts are software interrupts triggered by the BIOS during the boot process. These interrupts allow the BIOS to communicate with the operating system and other software. They perform tasks such as reading from or writing to disk, initializing hardware components, and carrying out low-level system functions. When an interrupt is triggered, the processor stops executing the current program and switches to the interrupt handler—a special routine that performs the required task before returning control to the main program.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-cpu-registers&quot;&gt;&lt;strong&gt;The CPU Registers&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;CPU registers are small, high-speed storage locations within the CPU used to hold data that is being processed or manipulated. They function similarly to RAM but are faster and more temporary. Registers are typically measured in bits, such as 8-bit or 32-bit registers, and store memory addresses, data being processed, and status information. Registers are a crucial component of a computer’s architecture, enabling fast access to frequently used data and significantly improving performance.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-code&quot;&gt;&lt;strong&gt;The Code&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Writing the boot sector requires using assembly language. It’s important to note that this code must be written and compiled for the target computer architecture. For instance, you cannot run this code on an ARM-based Raspberry Pi because it is coded in x86 assembly for x86 computers.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;a-simple-boot-sector-in-assembly-x86&quot;&gt;&lt;strong&gt;A Simple Boot Sector in Assembly x86&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;asm&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-asm &quot;&gt;&lt;code class=&quot;language-asm&quot; data-lang=&quot;asm&quot;&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;jmp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt; ;Jump to the current address (Infinite loop) ****
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;; Fill with 510 zeros minus the size of the previous code
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;times &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;510&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;($&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;$$) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;db &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;; the previously mentioned BIOS signature
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;dw &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;0xaa55
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;hello-world&quot;&gt;&lt;strong&gt;Hello World !&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;In order to print a single character we use the BIOS interrupt&lt;code&gt;0x10&lt;&#x2F;code&gt;which is responsible for various video services.&lt;&#x2F;p&gt;
&lt;p&gt;with&lt;code&gt;AH&lt;&#x2F;code&gt;set to&lt;code&gt;0x0E&lt;&#x2F;code&gt;(tty mode) and&lt;code&gt;AL&lt;&#x2F;code&gt;set to the ASCII value of the character to be displayed, a single character will be displayed on the screen.&lt;&#x2F;p&gt;
&lt;p&gt;Basically the interrupt&lt;code&gt;0x10&lt;&#x2F;code&gt;reads the&lt;code&gt;AX&lt;&#x2F;code&gt;register which is 16-bit register consisted of&lt;code&gt;AH:AL&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;asm&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-asm &quot;&gt;&lt;code class=&quot;language-asm&quot; data-lang=&quot;asm&quot;&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;;helloworld.asm
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;mov &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;ah&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;0x0e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt; ; tty mode
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;mov &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;al&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;#39;H&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;0x10
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;mov &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;al&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;#39;e&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;0x10
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;mov &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;al&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;#39;l&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;0x10
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;0x10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt; ; &amp;#39;l&amp;#39; is still on al, remember?
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;mov &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;al&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;#39;o&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;0x10
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;mov &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;al&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;#39; &amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;0x10
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;mov &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;al&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;#39;W&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;0x10
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;mov &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;al&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;#39;o&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;0x10
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;mov &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;al&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;#39;r&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;0x10
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;mov &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;al&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;#39;l&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;0x10
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;mov &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;al&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;#39;d&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;0x10
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;mov &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt;al&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f1fa8c;&quot;&gt;&amp;#39;!&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;0x10
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;jmp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt; ; jump to current address (infinite loop)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;times &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;510 &lt;&#x2F;span&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;($&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;$$) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;db &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8be9fd;&quot;&gt;dw &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bd93f9;&quot;&gt;0xaa55
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;compiling-and-testing&quot;&gt;Compiling and Testing&lt;&#x2F;h3&gt;
&lt;p&gt;While it’s possible to create an .iso file and boot this boot sector directly, it’s not recommended for beginners. Instead, we will use QEMU for emulation and NASM as the assembler.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; brew install nasm qemu &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;#macOS
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sudo pacman&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt; -S&lt;&#x2F;span&gt;&lt;span&gt; qemu nasm &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;#ArchLinux
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sudo apt-get install qemu-system nasm &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;#Debian&#x2F;Ubuntu
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and then we proceed to test our Hello World boot sector:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; nasm&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt; -f&lt;&#x2F;span&gt;&lt;span&gt; bin helloworld.asm&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt; -o&lt;&#x2F;span&gt;&lt;span&gt; helloworld.bin
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; qemu helloworld.bin
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note: on some systems you may need to use &lt;code&gt;qemu-system-x86_64&lt;&#x2F;code&gt; command.&lt;&#x2F;p&gt;
&lt;p&gt;If everything goes well, you should see a window like this:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;mazdak.dev&#x2F;wp-content&#x2F;uploads&#x2F;2023&#x2F;09&#x2F;Screenshot-2023-09-16-at-1.41.19-PM-1024x665.png&quot; alt=&quot;Terminal&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;references&quot;&gt;References&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;How Computers Really Work by Matthew Justice&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;wikipedia.org&quot;&gt;wikipedia.org&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cfenollosa&#x2F;os-tutorial&#x2F;&quot;&gt;github.com&#x2F;cfenollosa&#x2F;os-tutorial&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.cs.bham.ac.uk&#x2F;&#x2F;~exr&#x2F;lectures&#x2F;opsys&#x2F;10_11&#x2F;lectures&#x2F;os-dev.pdf&quot;&gt;www.cs.bham.ac.uk&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;wiki.osdev.org&#x2F;&quot;&gt;wiki.osdev.org&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;littleosbook.github.io&#x2F;&quot;&gt;littleosbook.github.io&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;web.archive.org&#x2F;web&#x2F;20160412174753&#x2F;http:&#x2F;&#x2F;www.jamesmolloy.co.uk&#x2F;tutorial_html&#x2F;index.html&quot;&gt;web.archive.org&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;rocket.ir&quot;&gt;rocket.ir&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The post &lt;a href=&quot;https:&#x2F;&#x2F;mazdak.dev&#x2F;diving-deeper-into-operating-systems-part-0&#x2F;&quot;&gt;Diving Deeper into Operating Systems – Part 0&lt;&#x2F;a&gt; appeared first on &lt;a href=&quot;https:&#x2F;&#x2F;mazdak.dev&quot;&gt;mazdak.dev&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>A Minimal Guide For Nmap</title>
        <published>2023-01-08T00:00:00+00:00</published>
        <updated>2023-01-08T00:00:00+00:00</updated>
        
        <author>
          <name>
            Mazdak Pakaghideh
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://mazdakdev.github.io/blog/nmap/"/>
        <id>https://mazdakdev.github.io/blog/nmap/</id>
        
        <content type="html" xml:base="https://mazdakdev.github.io/blog/nmap/">&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;mazdak.dev&#x2F;wp-content&#x2F;uploads&#x2F;2023&#x2F;01&#x2F;nmap-1.png&quot; alt=&quot;Nmap&quot; &#x2F;&gt;
&lt;em&gt;www.abrictosecurity.com&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;There are five main phases of hacking, and among them, the most essential one is gathering information.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;First you need to find a weakness, without it you’re aimless.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;or in a more technical way Reconnaissance &amp;amp; Scanning. Nmap is a popular open-source software used for both active reconnaissance and scanning. It can scan through different ports of a particular server and by that it gives us a lot of information.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;caution&quot;&gt;
	&lt;p class=&quot;alert-title&quot;&gt;
		&lt;i class=&quot;icon&quot;&gt;&lt;&#x2F;i&gt;Caution&lt;&#x2F;p&gt;
	&lt;p&gt;Note: This utility should not be used in illegal activities. Instead, you can use it by participating in CTF platforms such as &lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.hackthebox.com&#x2F;&quot;&gt;Hack The Box&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;

&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;so-basically-how&quot;&gt;So basically how?&lt;&#x2F;h2&gt;
&lt;p&gt;Each port number is dedicated to a particular service running in the background of a system. These services can be accessed by their unique port numbers, and from them, a lot of information such as service name, version, and vulnerabilities can be gained. Knowing this information is essential for identifying potential weaknesses and determining if they are exploitable.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;nmap-features&quot;&gt;Nmap Features&lt;&#x2F;h2&gt;
&lt;p&gt;Gaining information about services is just one of the many abilities of Nmap. In addition to these features, It offers a variety of different features.&lt;&#x2F;p&gt;
&lt;p&gt;Which includes:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Scan for vulnerabilities&lt;&#x2F;li&gt;
&lt;li&gt;Host discovery&lt;&#x2F;li&gt;
&lt;li&gt;OS detection&lt;&#x2F;li&gt;
&lt;li&gt;Firewall detection&lt;&#x2F;li&gt;
&lt;li&gt;Identify open ports&lt;&#x2F;li&gt;
&lt;li&gt;NSE Scripts&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;&#x2F;h2&gt;
&lt;p&gt;Nmap could be easily installed in Unix&#x2F;Linux-based Operating Systems by using the commands below. Or by visiting &lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;nmap.org&#x2F;download.html&quot;&gt;Nmap’s official download page&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sudo apt install namp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# Debian, Ubuntu
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sudo pacman&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt; -S&lt;&#x2F;span&gt;&lt;span&gt; nmap &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# Arch Linux
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sudo snap install nmap &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# Fedora
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sudo brew install nmap &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# MacOS
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;nmap-commands&quot;&gt;Nmap Commands&lt;&#x2F;h2&gt;
&lt;p&gt;Before proceeding, here is Nmap’s general commands structure:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ nmap [Scan-type] [Options] [Target]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;scanning-specific-systems&quot;&gt;Scanning Specific Systems&lt;&#x2F;h3&gt;
&lt;p&gt;This command scans 1000 usual ports by default.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; nmap &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;IP&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt; or &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;Hostname&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; nmap &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;IP 1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;] [&lt;&#x2F;span&gt;&lt;span&gt;IP 2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;] [&lt;&#x2F;span&gt;&lt;span&gt;IP n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; nmap 192.168.1.104 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;#Example
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;An Asterisk (*) could be used to scan all of the subnets.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ nmap 192.168.1.*
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A hyphen (-) could be used to specify a range of IP address.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282a36;color:#f8f8f2;&quot;&gt;&lt;code&gt;&lt;span&gt;$ nmap 192.168.0.0–255
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;stealth-scan&quot;&gt;Stealth Scan&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;img.wonderhowto.com&#x2F;img&#x2F;36&#x2F;13&#x2F;63578617777373&#x2F;0&#x2F;build-stealth-port-scanner-with-scapy-and-python.w1456.jpg&quot; alt=&quot;&quot; &#x2F;&gt;
&lt;em&gt;By null-byte.wonderhowto.com&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Although just like any other TCP 3-Way-Handshake a stealth scan is started by sending an SYN packet to the server, It has one huge difference. a stealth scan never completes as like the normal 3-Way-Handshake. Accordingly, it’s hard for the target to determine the scanning system.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; nmap&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt; -sS &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;Target&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; nmap&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt; -sS&lt;&#x2F;span&gt;&lt;span&gt; 192.168.1.5
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;retrieving-all-ip-addresses-in-a-network&quot;&gt;Retrieving All IP Addresses In a Network&lt;&#x2F;h3&gt;
&lt;p&gt;The commands below scan for all connected devices in a particular network using the TCP SYN scan method by providing a subnet range.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; nmap&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt; -sS &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;The_Subnet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; nmap&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt; -sS&lt;&#x2F;span&gt;&lt;span&gt; 192.168.1.0&#x2F;24 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;#Example
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;service-version-scanning&quot;&gt;Service Version Scanning&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; nmap&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt; -sV &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;Target&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; nmap&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt; -sV&lt;&#x2F;span&gt;&lt;span&gt; scanme.nmap.org &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;#Example 
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;os-scanning&quot;&gt;OS Scanning&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;One of Nmap’s best-known features is remote OS detection using TCP&#x2F;IP stack fingerprinting. Nmap sends a series of TCP and UDP packets to the remote host and examines practically every bit in the responses. After performing dozens of tests such as TCP ISN sampling, TCP options support and ordering, IP ID sampling, and the initial window size check, Nmap compares the results to its &lt;code&gt;nmap-os-db&lt;&#x2F;code&gt; database of more than 2,600 known OS fingerprints and prints out the OS details if there is a match.nmap.org&lt;&#x2F;p&gt;
&lt;p&gt;&lt;cite&gt;nmap.org&lt;&#x2F;cite&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; nmap&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt; -O &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;Target&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; nmap&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt; -O&lt;&#x2F;span&gt;&lt;span&gt; scanme.nmap.org &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;#Example
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;aggressive-scanning&quot;&gt;Aggressive Scanning&lt;&#x2F;h3&gt;
&lt;p&gt;This mode will enable OS detection (-O), Version Detection (-sV), Script scanning (-sC) and traceroute (–traceroute) altogether.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; nmap&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt; -A &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;Target&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; nmap&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt; -A&lt;&#x2F;span&gt;&lt;span&gt; scanme.nmap.org &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;#Example
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;port-scanning&quot;&gt;Port Scanning&lt;&#x2F;h3&gt;
&lt;p&gt;By using the -p parameter, the port scan could be easily performed.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; nmap&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt; -p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;Port&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;] [&lt;&#x2F;span&gt;&lt;span&gt;Target&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; nmap&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt; -p&lt;&#x2F;span&gt;&lt;span&gt; 22 192.168.1.5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;#Example
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can even specify the type of your desired port.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; nmap&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt; -p&lt;&#x2F;span&gt;&lt;span&gt; T:80
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A range of ports could be also scanned by Nmap.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; nmap&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt; -p&lt;&#x2F;span&gt;&lt;span&gt; 80-443 192.168.1.5
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;scanning-from-a-file&quot;&gt;Scanning From a File&lt;&#x2F;h3&gt;
&lt;p&gt;This type of scan is very useful when automating. For instance, a script can crawl over a website and save all the servers in a particular file. So that Nmap could use this file to scan all the crawled servers and even more it could be used to save the results in a specific file.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; nmap&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt; -iL &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;Path_To_File&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; nmap&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt; -iL&lt;&#x2F;span&gt;&lt;span&gt; .&#x2F;servers.txt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; result.txt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;#Example
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;vulnerability-scanning&quot;&gt;Vulnerability Scanning&lt;&#x2F;h3&gt;
&lt;p&gt;There are third-party scripts used for scanning vulnerabilities in Nmap. Among them the most well-known one is&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;vulnersCom&#x2F;nmap-vulners&quot;&gt;Nmap-Vulners&lt;&#x2F;a&gt;. You can use the commands below for installing and using this script.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#282a36;color:#f8f8f2;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# Navigating to the Nmap scripts directory
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cd &#x2F;usr&#x2F;share&#x2F;nmap&#x2F;scripts&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# Cloning the git repository
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; git clone https:&#x2F;&#x2F;github.com&#x2F;vulnersCom&#x2F;nmap-vulners.git
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# NSE scripts usage
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; nmap&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt; -sV --script&lt;&#x2F;span&gt;&lt;span&gt; vulners &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;script&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;args mincvss=&amp;lt;arg_val&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;] &amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;target&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff79c6;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6272a4;&quot;&gt;# Example
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50fa7b;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; nmap&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ffb86c;&quot;&gt; -sV --script&lt;&#x2F;span&gt;&lt;span&gt; nmap-vulners&#x2F; 192.168.1.5
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The post &lt;a href=&quot;https:&#x2F;&#x2F;mazdak.dev&#x2F;a-minimal-guide-for-nmap&#x2F;&quot;&gt;A Minimal Guide For Nmap&lt;&#x2F;a&gt; appeared first on &lt;a href=&quot;https:&#x2F;&#x2F;mazdak.dev&quot;&gt;mazdak.dev&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
        
    </entry>
</feed>
